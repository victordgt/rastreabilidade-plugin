package rastreabilidade.plugin.views;

import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.jdt.core.IType;
import org.eclipse.jface.action.Action;
import org.eclipse.jface.action.IMenuListener;
import org.eclipse.jface.action.IMenuManager;
import org.eclipse.jface.action.IToolBarManager;
import org.eclipse.jface.action.MenuManager;
import org.eclipse.jface.action.Separator;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.jface.viewers.DoubleClickEvent;
import org.eclipse.jface.viewers.IDoubleClickListener;
import org.eclipse.jface.viewers.ISelection;
import org.eclipse.jface.viewers.IStructuredSelection;
import org.eclipse.jface.viewers.TreeViewer;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.ui.IActionBars;
import org.eclipse.ui.ISharedImages;
import org.eclipse.ui.IWorkbenchActionConstants;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PlatformUI;
import org.eclipse.ui.ide.IDE;
import org.eclipse.ui.part.DrillDownAdapter;
import org.eclipse.ui.part.ViewPart;

import rastreabilidade.plugin.artefato.GerenciadorRegraDeNegocio;





/**
 * This sample class demonstrates how to plug-in a new
 * workbench view. The view shows data obtained from the
 * model. The sample creates a dummy model on the fly,
 * but a real implementation would connect to the model
 * available either in this or another plug-in (e.g. the workspace).
 * The view is connected to the model using a content provider.
 * <p>
 * The view uses a label provider to define how model
 * objects should be presented in the view. Each
 * view can present the same model objects using
 * different labels and icons, if needed. Alternatively,
 * a single label provider can be shared between views
 * in order to ensure that objects of the same type are
 * presented in the same way everywhere.
 * <p>
 */

public class RastreabilidadeView extends ViewPart {

	/**
	 * The ID of the view as specified by the extension.
	 */
	public static final String ID = "rastreabilidade.plugin.views.RastreabilidadeView";

	private TreeViewer viewer;
	private DrillDownAdapter drillDownAdapter;
	private Action action1;
	private Action action2;
	private Action action3;
	private Action doubleClickAction;

	private ViewContentProvider viewContentProvider;
	 

	public RastreabilidadeView() {
	}

	/**
	 * This is a callback that will allow us
	 * to create the viewer and initialize it.
	 */
	public void createPartControl(Composite parent) {
		viewer = new TreeViewer(parent, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL);
		drillDownAdapter = new DrillDownAdapter(viewer);
		viewContentProvider = new ViewContentProvider(this);
		viewer.setContentProvider(viewContentProvider);
		viewer.setLabelProvider(new ViewLabelProvider());
		viewer.setSorter(new NameSorter());
		viewer.setInput(getViewSite());

		// Create the help context id for the viewer's control
		PlatformUI.getWorkbench().getHelpSystem().setHelp(viewer.getControl(), "teste.viewer");
		makeActions();
		hookContextMenu();
		hookDoubleClickAction();
		contributeToActionBars();
	}

	private void hookContextMenu() {
		MenuManager menuMgr = new MenuManager("#PopupMenu");
		menuMgr.setRemoveAllWhenShown(true);
		menuMgr.addMenuListener(new IMenuListener() {
			public void menuAboutToShow(IMenuManager manager) {
				RastreabilidadeView.this.fillContextMenu(manager);
			}
		});
		Menu menu = menuMgr.createContextMenu(viewer.getControl());
		viewer.getControl().setMenu(menu);
		getSite().registerContextMenu(menuMgr, viewer);
	}

	private void contributeToActionBars() {
		IActionBars bars = getViewSite().getActionBars();
		fillLocalPullDown(bars.getMenuManager());
		fillLocalToolBar(bars.getToolBarManager());
	}

	private void fillLocalPullDown(IMenuManager manager) {
		manager.add(action1);
		manager.add(new Separator());
		manager.add(action2);
	}

	private void fillContextMenu(IMenuManager manager) {
		manager.add(action1);
		manager.add(action2);
		manager.add(action3);
		manager.add(new Separator());
		drillDownAdapter.addNavigationActions(manager);
		// Other plug-ins can contribute there actions here
		manager.add(new Separator(IWorkbenchActionConstants.MB_ADDITIONS));
	}
	
	private void fillLocalToolBar(IToolBarManager manager) {
		manager.add(action1);
		manager.add(action2);
		manager.add(action3);
		
		manager.add(new Separator());
		drillDownAdapter.addNavigationActions(manager);
	}

	private void makeActions() {
		constroiAction1();
		constroiAction2();
		
		
		doubleClickAction = new Action() {
			public void run() {
				ISelection selection = viewer.getSelection();
				Object obj = ((IStructuredSelection)selection).getFirstElement();
				
				//ABRIR O EDITOR JAVA PARA OS RECURSOS DA ÁRVORE
				abrirEditor(obj);
			}


		};
	}
	
	private void abrirEditor(Object obj) {
		if (obj instanceof TreeObject) {
			TreeObject treeObject = (TreeObject) obj;
			IFile ifile = ResourcesPlugin.getWorkspace().getRoot().
			getFile(treeObject.getResource().getFullPath());
			IWorkbenchPage dpage =
				RastreabilidadeView.this.getViewSite()
				.getWorkbenchWindow().getActivePage();
			if (dpage != null) {
				try {
					IDE.openEditor(dpage, ifile,true);
				}catch (Exception e) {
					// log exception
				}
			}
			
		}
	}

	//AÇÃO PARA CONSTRUIR ÁRVORE DE CASO DE USO
	private void constroiAction1() {
		action1 = new Action() {
			public void run() {
				GerenciadorRegraDeNegocio gerenciador = new GerenciadorRegraDeNegocio();
				Map<String, List<IType>> mapa = gerenciador.constroiMapa();
				ConstrutorArvoreView gerenciadorArvore = new ConstrutorArvoreView(mapa);
				viewContentProvider.setInvisibleRoot(gerenciadorArvore.constroi());
				//tentar atualizar para outro tipo de visão
				viewer.refresh();
			}
		};
		action1.setText("Rastreabilidade por Caso de Uso");
		action1.setToolTipText("Caso de Uso");
		action1.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
			getImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));
	}
	
	//AÇÃO PARA CONSTRUIR ÁRVORE DE REGRA DE NEGÓCIO
	private void constroiAction2() {
		action2 =  new Action() {
			public void run() {
				GerenciadorRegraDeNegocio gerenciador = new GerenciadorRegraDeNegocio();
				Map<String, List<IType>> mapa = gerenciador.constroiMapa();
				ConstrutorArvoreView gerenciadorArvore = new ConstrutorArvoreView(mapa);
				viewContentProvider.setInvisibleRoot(gerenciadorArvore.constroi());
				//tentar atualizar para outro tipo de visão
				viewer.refresh();

			}
		}; 
		
		action2.setText("Rastreabilidade por Regra de Negócio");
		action2.setToolTipText("Regra de Negócio");
		action2.setImageDescriptor(PlatformUI.getWorkbench().getSharedImages().
				getImageDescriptor(ISharedImages.IMG_OBJS_INFO_TSK));
	}
	

	private void hookDoubleClickAction() {
		viewer.addDoubleClickListener(new IDoubleClickListener() {
			public void doubleClick(DoubleClickEvent event) {
				doubleClickAction.run();
			}
		});
	}
	private void showMessage(String message) {
		MessageDialog.openInformation(
			viewer.getControl().getShell(),
			"Rastreabilidade View",
			message);
	}

	/**
	 * Passing the focus request to the viewer's control.
	 */
	public void setFocus() {
		viewer.getControl().setFocus();
	}
}