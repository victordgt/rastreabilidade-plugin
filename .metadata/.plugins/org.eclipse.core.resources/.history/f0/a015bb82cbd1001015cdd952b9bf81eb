package rastreabilidade.plugin.artefato;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.IAnnotation;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IMemberValuePair;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;

import rastreabilidade.CasoDeUso;
import rastreabilidade.plugin.anotacao.AnotacaoUtil;
import rastreabilidade.plugin.util.PluginUtil;

public class GerenciadorCasoDeUso {

	private Map<String, List<IType>> mapaArtefatos = new HashMap<String, List<IType>>();
	
	public Map<String, List<IType>> getMapaClasses() {
		return mapaArtefatos;
	}
	


	public GerenciadorCasoDeUso() {
		IProject[] projects = ResourcesPlugin.getWorkspace().getRoot()
				.getProjects();
		
		PluginUtil pluginUtil = new PluginUtil();

		for (IProject project : projects) {
			try {
				project.open(null);
			} catch (CoreException e) {
				e.printStackTrace();
			}
			

			IJavaProject javaProject = JavaCore.create(project);
			
	
			
			pluginUtil.recuperaRecursosProjeto(javaProject);

			List<ICompilationUnit> compilaveis = pluginUtil.recuperaRecursosProjeto(javaProject);
			List<IType> classesComAnotacao = pluginUtil.recuperaElementosComAnotacao(CasoDeUso.class, compilaveis);
			
			constroiMapa(classesComAnotacao);
			
		}
		
	}

	private void constroiMapa(List<IType> classesComAnotacao) {
		
		for (IType classe : classesComAnotacao) {
			
			IAnnotation[] anotacoes;
			try {
				anotacoes = classe.getAnnotations();
				
				for (IAnnotation annotation : anotacoes) {
					
					if (AnotacaoUtil.comparaAnotacaoClasse(CasoDeUso.class, annotation)) {
						try {
							IMemberValuePair[] membros = annotation.getMemberValuePairs();
							String nome = (String)recuperaMemberValuePair("nome", membros);
							List<IType> listaTipos = mapaArtefatos.get(nome);
							
							if (listaTipos == null) {
								listaTipos = new ArrayList<IType>();
								mapaArtefatos.put(nome, listaTipos);
							}		
							
							listaTipos.add(classe);
						} catch (IllegalArgumentException e) {
							e.printStackTrace();
						} catch (JavaModelException e) {
							e.printStackTrace();
						}
					}
				}				
				
			} catch (JavaModelException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		
	}
	
	
	private Object recuperaMemberValuePair(String chave, IMemberValuePair[] memberValuePairArray) {
		if (memberValuePairArray == null) {
			throw new IllegalArgumentException("Não existem valores para a anotação");
		}
		for (IMemberValuePair memberValuePair: memberValuePairArray) {
			if (memberValuePair.getMemberName().equals(chave)) {
				return memberValuePair.getValue();
			}	
		}
		
		throw new IllegalArgumentException("Chave inexiste");
	}
	



}
