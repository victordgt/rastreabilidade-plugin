package rastreabilidade.plugin.views.casodeuso;

import java.io.File;
import java.lang.annotation.Annotation;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.IAnnotation;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IMemberValuePair;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.jdt.internal.compiler.apt.model.AnnotationMemberValue;

import rastreabilidade.CasoDeUso;
import rastreabilidade.plugin.anotacao.AnotacaoUtil;
import rastreabilidade.plugin.util.PluginUtil;

public class GerenciadorCasoDeUso {
	

	
	private Map<String, List<IType>> mapa2 = new HashMap<String, List<IType>>();
	
	public Map<String, List<IType>> getMapaClasses2() {
		return mapa2;
	}
	

	public Map<Annotation, List<Class<?>>> getMapaClasses() {
		return mapa;
	}

	public void setMapaClasses(Map<Annotation, List<Class<?>>> mapaClasses) {
		this.mapa = mapaClasses;
	}

	public GerenciadorCasoDeUso() {
		IProject[] projects = ResourcesPlugin.getWorkspace().getRoot()
				.getProjects();
		
		PluginUtil pluginUtil = new PluginUtil();

		for (IProject project : projects) {
			try {
				project.open(null);
			} catch (CoreException e) {
				e.printStackTrace();
			}
			

			IJavaProject javaProject = JavaCore.create(project);
			
	
			
			pluginUtil.recuperaRecursosProjeto(javaProject);

			String[] classPathEntries = pluginUtil.recuperaClassPathsProjeto(javaProject);
			List<URL> urlList = pluginUtil.recuperaUrlsClasse(classPathEntries);

			//CRIA UM CLASSLOADER DO PROJETO
			URLClassLoader classLoader = pluginUtil.getProjectClassLoader(project, urlList);
			
			List<ICompilationUnit> compilaveis = pluginUtil.recuperaRecursosProjeto(javaProject);
			List<IType> classesComAnotacao = pluginUtil.recuperaElementosComAnotacao(CasoDeUso.class, compilaveis);
			
			constroiMapa(classesComAnotacao);

			constroiMapaUrls(classPathEntries, classLoader); 
			
		}
		
	}



	private void constroiMapaUrls(String[] classPathEntries,
			URLClassLoader classLoader) {
		
		PluginUtil pluginUtil = new PluginUtil();
		try {
			
			for ( URL url: classLoader.getURLs()) {
				File arquivo = new File(url.getFile());
			
				List<String> arquivos = new ArrayList<String>();
				pluginUtil.findFiles(arquivo, arquivos);
				
				List<String> classesClassPath = pluginUtil.retiraCaminhoBiblioteca(classPathEntries, arquivos);
				constroiMapa(classesClassPath, classLoader);	
			}

		} catch (ClassNotFoundException e) {
		}
	}
	
	private void constroiMapa(List<IType> classesComAnotacao) {
		
		for (IType classe : classesComAnotacao) {
			
			IAnnotation[] anotacoes;
			try {
				anotacoes = classe.getAnnotations();
				for (IAnnotation annotation : anotacoes) {
					try {
						IMemberValuePair[] membros = annotation.getMemberValuePairs();
						String nome = (String)recuperaMemberValuePair("nome", membros);
						List<IType> listaTipos = mapa2.get(nome);
						
						if (listaTipos == null) {
							listaTipos = new ArrayList<IType>();
							mapa2.put(nome, listaTipos);
						}		
						
						listaTipos.add(classe);
					} catch (IllegalArgumentException e) {
						e.printStackTrace();
					} catch (JavaModelException e) {
						e.printStackTrace();
					}
				}				
				
			} catch (JavaModelException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

		}
		
	}
	
	
	private Object recuperaMemberValuePair(String chave, IMemberValuePair[] memberValuePairArray) {
		if (memberValuePairArray == null) {
			throw new IllegalArgumentException("Não existem valores para a anotação");
		}
		for (IMemberValuePair memberValuePair: memberValuePairArray) {
			if (memberValuePair.getMemberName().equals(chave)) {
				return memberValuePair.getValue();
			}	
		}
		
		throw new IllegalArgumentException("Chave inexiste");
	}
	

	private void  constroiMapa(List<String> classesClasspath, URLClassLoader classLoader) {
		
		
		
		for (String arquivo : classesClasspath) {
			try {
			
				Class<?> artefato = classLoader.loadClass(arquivo);
				
				if (AnotacaoUtil.temAnotacaoClasse(CasoDeUso.class, artefato)) {
					Annotation casoDeUso = AnotacaoUtil.getAnotacaoClasse(CasoDeUso.class, artefato);
					
					List<Class<?>> classes  = mapa.get(casoDeUso);
					if (classes == null) {
						classes = new ArrayList<Class<?>>();
					}
					
					classes.add(artefato);
					mapa.put(casoDeUso, classes);
				}
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} 
		}
	}

}
