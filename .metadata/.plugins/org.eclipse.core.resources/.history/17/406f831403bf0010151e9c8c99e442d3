package rastreabilidade.plugin.views.casodeuso;

import java.io.File;
import java.lang.annotation.Annotation;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IPath;
import org.eclipse.core.runtime.Path;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.launching.JavaRuntime;

import rastreabilidade.CasoDeUso;

public class GerenciadorCasoDeUso {
	
	
	private Map<Annotation, List<Class<?>>> mapa = new HashMap<Annotation, List<Class<?>>>();

	public Map<Annotation, List<Class<?>>> getMapaClasses() {
		return mapa;
	}

	public void setMapaClasses(Map<Annotation, List<Class<?>>> mapaClasses) {
		this.mapa = mapaClasses;
	}

	public GerenciadorCasoDeUso() {

		List<IJavaProject> javaProjects = new ArrayList<IJavaProject>();
		IProject[] projects = ResourcesPlugin.getWorkspace().getRoot()
				.getProjects();
		
		PluginUtil pluginUtil = new PluginUtil();

		for (IProject project : projects) {
			try {
				project.open(null);
			} catch (CoreException e) {
				e.printStackTrace();
			}
			IJavaProject javaProject = JavaCore.create(project);
			javaProjects.add(javaProject);

			String[] classPathEntries = pluginUtil.recuperaClassPathsProjeto(javaProject);

			List<URL> urlList = recuperaUrlsClasse(classPathEntries);

			URLClassLoader classLoader = getProjectClassLoader(project, urlList);

			
				
			constroiMapaUrls(classPathEntries, classLoader); 
			
		}
		
	}

	private void constroiMapaUrls(String[] classPathEntries,
			URLClassLoader classLoader) {
		
		PluginUtil pluginUtil = new PluginUtil();
		try {
			
			for ( URL url: classLoader.getURLs()) {
				File arquivo = new File(url.getFile());
			
				List<String> arquivos = new ArrayList<String>();
				findFiles(arquivo, arquivos);
				
				List<String> classesClassPath = pluginUtil.retiraCaminhoBiblioteca(classPathEntries, arquivos);
				constroiMapa(classesClassPath, classLoader);	
			}

		} catch (ClassNotFoundException e) {
		}
	}



	private List<URL> recuperaUrlsClasse(String[] classPathEntries) {
		List<URL> urlList = new ArrayList<URL>();
		if (classPathEntries != null) {
			for (int i = 0; i < classPathEntries.length; i++) {
				String entry = classPathEntries[i];
				IPath path = new Path(entry);
				URL url;
				try {
					url = path.toFile().toURI().toURL();
				} catch (MalformedURLException e) {
					url = null;
					e.printStackTrace();
				}
				urlList.add(url);
			}
		}
		return urlList;
	}
	
	

	private URLClassLoader getProjectClassLoader(IProject project,
			List<URL> urlList) {
		ClassLoader parentClassLoader = project.getClass().getClassLoader();
		URL[] urls = (URL[]) urlList.toArray(new URL[urlList.size()]);
		URLClassLoader classLoader = new URLClassLoader(urls, parentClassLoader);

		return classLoader;
	}



	
	private void findFiles(File directory, List<String> classes)
			throws ClassNotFoundException {
		
		if (directory.isDirectory()) {		
			File[] files = directory.listFiles();
		
			for (File file : files) {
				if (file.isDirectory()) {
					findFiles(file, classes);
				} else  if (file.getName().endsWith("class")) {
					classes.add(file.toString());
				}
			} 
		} else if (directory.isFile() && directory.getAbsolutePath().endsWith("class")) {
			classes.add(directory.toString());
		}
		
	}
	
	private void  constroiMapa(List<String> classesClasspath, URLClassLoader classLoader) {
	
		
		for (String arquivo : classesClasspath) {
			try {
			
				Class<?> artefato = classLoader.loadClass(arquivo);
				
				if (AnotacaoUtil.temAnotacaoClasse(CasoDeUso.class, artefato)) {
					Annotation casoDeUso = AnotacaoUtil.getAnotacaoClasse(CasoDeUso.class, artefato);
					
					List<Class<?>> classes  = mapa.get(casoDeUso);
					if (classes == null) {
						classes = new ArrayList<Class<?>>();
					}
					
					classes.add(artefato);
					mapa.put(casoDeUso, classes);
				}
				
			} catch (ClassNotFoundException e) {
				e.printStackTrace();
			} 
		}
	}
	
	public static void main(String[] args) {
		
		ThreadLocal.class.getClassLoader();
	}
	

}
