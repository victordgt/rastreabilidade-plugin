package rastreabilidade.plugin.artefato;

import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.ResourcesPlugin;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.jdt.core.IAnnotation;
import org.eclipse.jdt.core.ICompilationUnit;
import org.eclipse.jdt.core.IJavaProject;
import org.eclipse.jdt.core.IMemberValuePair;
import org.eclipse.jdt.core.IType;
import org.eclipse.jdt.core.JavaCore;
import org.eclipse.jdt.core.JavaModelException;
import org.eclipse.swt.widgets.Shell;

import rastreabilidade.plugin.anotacao.AnotacaoUtil;
import rastreabilidade.plugin.ui.MessageDialogUtil;
import rastreabilidade.plugin.util.PluginUtil;

/**
 * Classe responsável pela associação entre artefatos de requisitos e classes Java
 * 
 * @author Victor
 */
public abstract class GerenciadorArtefato {
	
	/** Classe da anotação */
	protected Class<? extends Annotation> clazz;
	
	/** Mapa com as chaves dos elementos e uma lista de classes associadas*/
	protected Map<String, List<IType>> mapaArtefatos = new HashMap<String, List<IType>>();
	
	/** Campo a ser buscado na anotação para a recuperação do valor associado*/
	protected String campo;
	
	/** Shell associado a view do Eclipse, para possibilitar a exibição de mensagens de erro*/
	protected Shell shell;
	
	protected GerenciadorArtefato(Class<? extends Annotation> clazz, String campo, Shell shell) {
		this.clazz = clazz;
		this.campo = campo;
		this.shell = shell;
	}
	
	
	public Map<String, List<IType>> constroiMapa() {
		IProject[] projects = ResourcesPlugin.getWorkspace().getRoot()
		.getProjects();

		PluginUtil pluginUtil = new PluginUtil();

		for (IProject project : projects) {
			try {
				project.open(null);
			} catch (CoreException e) {
				e.printStackTrace();
			}


			IJavaProject javaProject = JavaCore.create(project);
			
			//Verifica se o projeto está aberto para recuperar as informações associadas ao projeto
			if (javaProject.isOpen()) {
				//Carrega para a memória as propriedades de rastreabilidade do projeto java
				try {
					pluginUtil.carregaPropriedadesRastreabilidade(project);
				} catch (IllegalArgumentException ex) {
					new MessageDialogUtil(this.shell, ex.getMessage());
				}
				
	
				List<ICompilationUnit> compilaveis = pluginUtil.recuperaRecursosProjeto(javaProject);
				List<IType> classesComAnotacao = pluginUtil.recuperaElementosComAnotacao(clazz, compilaveis);
	
				filtrar(classesComAnotacao);
			}
		}		
		
		return mapaArtefatos;
	}

	
	/**
	 * FILTRA POR PADRÃO UMA ANNOTATION COM UM CAMPO NOME
	 * @param classesComAnotacao
	 */
	protected  void filtrar(List<IType> classesComAnotacao) {

		AnotacaoUtil anotacaoUtil = new AnotacaoUtil();
		PluginUtil pluginUtil = new PluginUtil();

		for (IType classe : classesComAnotacao) {

			IAnnotation[] anotacoes;
			try {
				anotacoes = classe.getAnnotations();

				for (IAnnotation annotation : anotacoes) {

					if (AnotacaoUtil.comparaAnotacaoClasse(clazz, annotation)) {
						try {
							IMemberValuePair[] membros = annotation.getMemberValuePairs();
							insereMembrosMapa(classe, campo, membros);
						} catch (IllegalArgumentException e) {
							e.printStackTrace();
						} catch (JavaModelException e) {
							e.printStackTrace();
						}
					}
				}				

			} catch (JavaModelException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}		
	}
	
	private void insereMembrosMapa(IType classe, String campo, IMemberValuePair[] membros) {	
		AnotacaoUtil anotacaoUtil = new AnotacaoUtil();
		PluginUtil pluginUtil = new PluginUtil();
		
		String chave = (String)anotacaoUtil.recuperaMemberValuePair(campo, membros);
		
		String valor = null;
		try {
			valor = pluginUtil.recuperaPropriedadeRastreabilidade(chave);
		} catch(IllegalArgumentException ex) {
			new MessageDialogUtil(this.shell, ex.getMessage());
		}
		
		List<IType> listaTipos = mapaArtefatos.get(valor);

		if (listaTipos == null) {
			listaTipos = new ArrayList<IType>();
			mapaArtefatos.put(valor, listaTipos);
		}		

		listaTipos.add(classe);		
	}

}
